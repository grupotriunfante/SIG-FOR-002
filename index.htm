<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Relatório de Ronda de 5S</title>
    <style>
        body {
            font-family: 'Segoe UI', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f6f9;
            color: #333;
        }

        header {
            background-color: #ffffff;
            padding: 1px 10px;
            display: flex;
            align-items: center;
            justify-content: flex-start;
            color: #333;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            position: relative;
        }

        header img {
            height: 50px;
            margin: 0 10px;
        }

        header h1 {
            font-size: 33px;
            margin: 0;
            text-align: center;
            position: absolute;
            left: 50%;
            transform: translateX(-50%);
        }

        .subtitulo {
            margin-left: auto;
            margin-right: 1px;
            font-weight: normal;
            color: #332;
            box-shadow: 0 1px 1px rgba(0, 0, 0, 0.05);
            position: relative;
        }

        .container {
            max-width: 1000px;
            margin: 40px auto;
            background: white;
            padding: 40px;
            border-radius: 12px;
            box-shadow: 0 0 10px rgba(0,0,0,0.08);
        }

        h2 {
            margin-top: 30px;
            color: #1c2b3a;
            font-size: 20px;
        }

        label {
            font-weight: bold;
            margin-top: 15px;
            display: block;
            font-size: 14px;
        }

        .editable-box {
            border: 1px solid #ccc;
            min-height: 150px;
            padding: 10px;
            margin-top: 5px;
            background: #fff;
            border-radius: 8px;
        }

        input, select, textarea {
            width: 100%;
            padding: 10px;
            border-radius: 8px;
            border: 1px solid #ccc;
            margin-top: 5px;
            font-size: 14px;
            box-sizing: border-box;
        }

        /* Altura mínima para o textarea principal, para que a expansão funcione bem */
        textarea {
            min-height: 150px;
            overflow: hidden; /* Esconde a barra de rolagem padrão */
            resize: none; /* Impede o redimensionamento manual pelo usuário */
        }

        /* Estilos específicos para textareas dentro de células de tabela */
        table td textarea {
            min-height: 40px; /* Altura mínima para textareas na tabela */
            padding: 8px; /* Ajuste o padding para caber melhor na célula */
            margin-top: 0; /* Remove margem superior extra */
            margin-bottom: 0; /* Remove margem inferior extra */
            vertical-align: middle; /* Alinha o textarea verticalmente na célula */
        }

        .uploaded-img {
            max-width: 100%;
            height: auto;
            margin-top: 10px;
            display: block;
            border-radius: 8px;
        }

        .btn {
            background-color: #1c2b3a;
            color: white;
            padding: 12px 20px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 16px;
            transition: 0.3s;
            margin-top: 20px;
        }

        .btn-danger {
            background-color: #dc3545; /* Vermelho */
            color: white;
            padding: 6px 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9em;
            transition: 0.3s;
            margin-left: 5px;
        }

        .btn-danger:hover {
            background-color: #c82333;
        }

        .btn:hover {
            background-color: #324c63;
        }

        .footer {
            text-align: center;
            font-size: 13px;
            color: #777;
            margin-top: 60px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        table th, table td {
            padding: 12px;
            border: 1px solid #ddd;
            text-align: left;
        }

        table th {
            background-color: #f4f6f9;
            font-weight: normal;
        }

        .flex-row {
            display: flex;
            gap: 20px;
            margin-top: 20px;
        }

        .flex-row > div {
            flex: 1;
        }

        #statusMensagem {
            text-align: center;
            margin-top: 20px;
            font-weight: bold;
            color: #1c2b3a;
        }

        /* --- Media Queries para Responsividade --- */
        @media (max-width: 768px) {
            header {
                flex-direction: column;
                align-items: center;
                padding: 10px;
            }

            header img {
                margin-bottom: 10px;
            }

            header h1 {
                position: static;
                transform: none;
                font-size: 24px;
                text-align: center;
                margin-top: 10px;
            }

            .subtitulo {
                margin: 10px auto 0;
            }

            .container {
                margin: 20px 15px;
                padding: 20px;
            }

            .flex-row {
                flex-direction: column;
                gap: 15px;
            }

            table, thead, tbody, th, td, tr {
                display: block;
            }

            table thead tr {
                position: absolute;
                top: -9999px;
                left: -9999px;
            }

            table tr {
                border: 1px solid #ddd;
                margin-bottom: 10px;
                border-radius: 8px;
                overflow: hidden;
            }

            table td {
                border: none;
                border-bottom: 1px solid #eee;
                position: relative;
                padding-left: 50%;
                text-align: right;
            }

            table td:before {
                position: absolute;
                top: 6px;
                left: 6px;
                width: 45%;
                padding-right: 10px;
                white-space: nowrap;
                content: attr(data-label);
                font-weight: bold;
                text-align: left;
            }

            /* Ajuste para textareas dentro da tabela em mobile */
            table td textarea,
            table td input[type="date"] { /* Mantém o input date */
                width: calc(100% - 10px);
                text-align: right;
                padding-right: 5px;
            }
        }

        @media (max-width: 480px) {
            header img {
                height: 40px;
            }

            header h1 {
                font-size: 20px;
            }

            .btn {
                width: 100%;
                margin-top: 15px;
            }
        }
    </style>
</head>

<body>
    <header>
        <img src="http://i.imgur.com/Fln53Oi.png" alt="Logo do SIG">
        <img src="https://i.imgur.com/g0XvPeH.png" alt="Logo do SOL">
        <h1>Relatório de Ronda 5S</h1>
        <h5 class="subtitulo">SIG-FOR-002</h5>
    </header>

    <div class="container">
        <div class="flex-row">
            <div>
                <label for="unidade">Unidade</label>
                <select id="unidade">
                    <option value="">Selecione</option>
                    <option>TCA</option>
                    <option>TCV/ABC</option>
                    <option>MCD/TCG</option>
                    <option>TBL</option>
                    <option>TBA/TPA</option>
                    <option>TSJ</option>
                    <option>API</option>
                    <option>TPH</option>
                </select>
            </div>

            <div>
                <label for="departamento">Departamento</label>
                <select id="departamento" onchange="atualizarArea()">
                    <option value="">Selecione</option>
                    <option value="logistica">Logística</option>
                    <option value="administrativo">Administrativo</option>
                </select>
            </div>

            <div>
                <label for="area">Área</label>
                <select id="area">
                    <option value="">Selecione</option>
                </select>
            </div>
        </div>

        <label for="responsavel">Responsável da Ronda</label>
        <input type="text" id="responsavel" placeholder="Digite o nome do responsável">

        <h2>Anomalia Encontrada</h2>
        <input type="file" id="imagemDescricaoInput" accept="image/*" onchange="inserirImagem('imagemDescricao', this)">
        <div id="imagemDescricao" class="editable-box"></div>

        <h2>Descrição da Anomalia</h2>
        <textarea id="detalhe" placeholder="Descreva o detalhe da anomalia" oninput="autoExpandTextarea(this)"></textarea>

        <h2>Plano de Ação</h2>
        <p>Liste as ações necessárias para resolver o problema:</p>
        <table>
            <thead>
                <tr>
                    <th>Nº</th>
                    <th>Ação</th>
                    <th>Responsável</th>
                    <th>Prazo</th>
                    <th></th>
                </tr>
            </thead>
            <tbody id="action-table-body">
                <tr>
                    <td data-label="Nº">1</td>
                    <td data-label="Ação"><textarea placeholder="Descreva a ação" oninput="autoExpandTextarea(this)"></textarea></td>
                    <td data-label="Responsável"><textarea placeholder="Responsável" oninput="autoExpandTextarea(this)"></textarea></td>
                    <td data-label="Prazo"><input type="date"></td>
                    <td data-label="Ações"><button class="btn-danger" onclick="deleteRow(this)">🗑️</button></td>
                </tr>
            </tbody>
        </table>
        <button class="btn" onclick="addRow()">➕ Adicionar Ação</button>

        <div class="buttons">
            <button class="btn" onclick="enviarFormulario()">📤 Enviar</button>
        </div>

        <div id="statusMensagem"></div>

        <div class="footer">
            SIG - Sistema Integrado de Gestão • Relatório de Ronda 5S
        </div>
    </div>

    <script>
        let contadorAcoes = 1;

        // Função para auto-expandir o textarea
        function autoExpandTextarea(element) {
            element.style.height = 'auto'; // Reseta a altura para calcular corretamente
            element.style.height = (element.scrollHeight) + 'px'; // Define a altura com base no conteúdo
        }

        function addRow() {
            contadorAcoes++;
            const table = document.getElementById('action-table-body');
            const row = document.createElement('tr');
            row.innerHTML = `
                <td data-label="Nº">${contadorAcoes}</td>
                <td data-label="Ação"><textarea placeholder="Descreva a ação" oninput="autoExpandTextarea(this)"></textarea></td>
                <td data-label="Responsável"><textarea placeholder="Responsável" oninput="autoExpandTextarea(this)"></textarea></td>
                <td data-label="Prazo"><input type="date"></td>
                <td data-label="Ações"><button class="btn-danger" onclick="deleteRow(this)">🗑️</button></td>
            `;
            table.appendChild(row);
            updateRowNumbers();

            // Chamar autoExpandTextarea para os novos textareas, caso já tenham conteúdo (ex: preenchimento automático)
            row.querySelectorAll('textarea').forEach(textarea => autoExpandTextarea(textarea));
        }

        function deleteRow(button) {
            const row = button.closest('tr');
            if (row) {
                row.remove();
                updateRowNumbers();
            }
        }

        function updateRowNumbers() {
            const tableBody = document.getElementById('action-table-body');
            const rows = tableBody.getElementsByTagName('tr');
            for (let i = 0; i < rows.length; i++) {
                rows[i].cells[0].textContent = i + 1;
            }
            contadorAcoes = rows.length;
        }

        function inserirImagem(divId, input) {
            const imagemContainer = document.getElementById(divId);
            const file = input.files[0];
            if (file && file.type.startsWith("image/")) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const img = document.createElement("img");
                    img.src = e.target.result;
                    img.className = "uploaded-img";
                    imagemContainer.innerHTML = '';
                    imagemContainer.appendChild(img);
                    console.log("Imagem carregada como Base64:", img.src);
                };
                reader.readAsDataURL(file);
            }
            input.value = "";
        }

        async function enviarFormulario() {
            const statusMensagem = document.getElementById('statusMensagem');
            statusMensagem.textContent = "Enviando formulário... aguarde.";

            const responsavelRonda = document.getElementById("responsavel").value.trim();
            const unidade = document.getElementById("unidade").value;
            const departamento = document.getElementById("departamento").value;
            const area = document.getElementById("area").value;
            const detalhe = document.getElementById("detalhe").value.trim();

            const imagemElement = document.querySelector("#imagemDescricao img");
            let imagemBase64 = null;
            if (imagemElement) {
                imagemBase64 = imagemElement.src.split(',')[1];
            }

            const tabela = document.querySelectorAll("#action-table-body tr");
            const acoes = [];

            tabela.forEach((linha, index) => {
                if (linha.cells.length > 3) {
                    // Agora buscando por textarea
                    const acao = linha.cells[1].querySelector('textarea').value.trim();
                    const responsavel = linha.cells[2].querySelector('textarea').value.trim();
                    const prazo = linha.cells[3].querySelector('input').value;

                    if (acao || responsavel || prazo) {
                        acoes.push({
                            Numero: index + 1,
                            Acao: acao,
                            Responsavel: responsavel,
                            Prazo: prazo
                        });
                    }
                }
            });

            const formularioId = "SOL-" + Date.now();

            const dadosFormulario = {
                FormularioID: formularioId,
                Unidade: unidade,
                Departamento: departamento,
                Area: area,
                ResponsavelRonda: responsavelRonda,
                DetalheAnomalia: detalhe,
                Evidencia: imagemBase64,
                Acoes: acoes
            };

            // --- AVISO CRÍTICO: A requisição 'fetch' abaixo SÓ FUNCIONARÁ se este arquivo estiver
            // --- sendo executado em um ambiente com acesso à internet e sem restrições de CORS
            // --- para o seu Logic App. Se você hospedar este arquivo localmente (abrindo direto
            // --- no navegador via file:///) ou em um servidor sem a configuração CORS adequada,
            // --- esta parte da funcionalidade de envio pode falhar.
            try {
                const response = await fetch('https://prod-15.brazilsouth.logic.azure.com:443/workflows/a62a81e1190d45aea44993e5863ae9e1/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=yu5ubkDAP-zY9ncoi3jNMbR5nJRSpuF_9AV4PoAAMg4', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(dadosFormulario)
                });

                if (response.ok) {
                    statusMensagem.textContent = "Formulário enviado com sucesso! ✅";
                    limparCamposFormulario();
                } else {
                    statusMensagem.textContent = `Erro ao enviar o formulário: ${response.status} ${response.statusText} ❌`;
                }
            } catch (error) {
                console.error('Erro ao enviar formulário:', error);
                statusMensagem.textContent = "Erro de conexão ao enviar. Verifique a URL ou sua conexão. ❌";
            }
        }

        function limparCamposFormulario() {
            document.getElementById("unidade").value = "";
            document.getElementById("departamento").value = "";
            document.getElementById("area").innerHTML = '<option value="">Selecione</option>';
            document.getElementById("responsavel").value = "";
            document.getElementById("detalhe").value = "";
            document.getElementById("imagemDescricaoInput").value = "";
            document.getElementById("imagemDescricao").innerHTML = "";

            // Limpa a tabela e adiciona a primeira linha de volta
            const tableBody = document.getElementById('action-table-body');
            tableBody.innerHTML = `
                <tr>
                    <td data-label="Nº">1</td>
                    <td data-label="Ação"><textarea placeholder="Descreva a ação" oninput="autoExpandTextarea(this)"></textarea></td>
                    <td data-label="Responsável"><textarea placeholder="Responsável" oninput="autoExpandTextarea(this)"></textarea></td>
                    <td data-label="Prazo"><input type="date"></td>
                    <td data-label="Ações"><button class="btn-danger" onclick="deleteRow(this)">🗑️</button></td>
                </tr>
            `;
            contadorAcoes = 1; // Reseta o contador
            document.getElementById('statusMensagem').textContent = ''; // Limpa a mensagem de status

            // Garante que todos os textareas voltem à altura original após limpar
            document.querySelectorAll('textarea').forEach(textarea => {
                if (textarea.id === 'detalhe') {
                    textarea.style.height = '150px'; // Altura original do textarea principal
                } else {
                    textarea.style.height = '40px'; // Altura original dos textareas da tabela
                }
            });
        }

        function atualizarArea() {
            const departamento = document.getElementById("departamento").value;
            const areaSelect = document.getElementById("area");

            areaSelect.innerHTML = '<option value="">Selecione</option>';

            if (departamento === "logistica") {
                const areasLogistica = ["CPD", "Recebimento", "Packing", "Corredores", "Expedição", "Vestiário", "Câmera Fria"];
                areasLogistica.forEach(area => {
                    const option = document.createElement("option");
                    option.value = area;
                    option.textContent = area;
                    areaSelect.appendChild(option);
                });
            } else if (departamento === "administrativo") {
                const areasAdministrativo = ["RH", "Comercial", "Banheiros", "Comercial", "Financeiro", "Área Comum"];
                areasAdministrativo.forEach(area => {
                    const option = document.createElement("option");
                    option.value = area;
                    option.textContent = area;
                    areaSelect.appendChild(option);
                });
            }
        }
    </script>
</body>
</html>
